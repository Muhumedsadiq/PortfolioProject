## CTE TEMPORARY PLACE AND YOU HAVE TO RUN WITH ENTIRE CTE  

 

 

WITH CTE_EMPLOYEE AS  

(SELECT FIRSTNAME, LASTNAME, GENDER, SALARY,  

COUNT (GENDER) OVER (PARTITION BY GENDER) AS TOTALGENDER 

,	AVG(SALARY) OVER (PARTITION BY GENDER) AS AVGSALARY 

FROM SQLTUTORIAL.EMPLOYEEDEMOGRAPHICS EMP 

ON EMP.EMPLOYEEID = SAL.EMPLOYEEID  

WHERE SALARY > '45000' 

 

) 

 

SELECT * 

FROM CTE_EMPLOYEE  

 

SELECT FIRSTNAME, AVGSALARY  

FROM CTE_EMPLOYEE 

 

 

 

## TEMP TABLES  

 

CREATE TABLE #TEMP_EMPLOYEE ( 

EMPLOYEEID INT,  

JOBTITLE VARCHAR (100),  

SALARY INT  

) 

 

SELECT *  

FROM #TEMP_EMPLOYEE  

 

INSERT INTO #TEMP_EMPLOYEE VALUES (  

'1001', 'HR', '45000' 

 

) 

 

INSERT INTO #TEMP_EMPLOYEE 

SELECT * 

FROM SQLTUTORIAL..EMPLOYEESALARY  

 

 

DROP TABLE IF EXISTS #TEMP_EMPLOYEE2  

CREATE TABLE #TEMP_EMPLOEE2( 

JOBTITLE VARCHAR(50), 

EMPLOYEESPERJOB INT, 

AVGAGE INT, 

AVGSALARY INT 

) 

 

 

INSERT INTO #TEMP_EMPLOYEE2 

SELECT JOBTITLE, COUNT ( JOBTITLE), AVG(AGE), AVG (SALARY) 

FROM SQLTUTORIAL.. EMPLOYEEDEMOGRAPHICS EMP 

JOIN SQLTUTORIAL.. EMPLOYEESALARY SAL  

ON EMP.EMPLOYEEID = SAL.EMPLOYEEID  

GROUP BY JOBTITLE  

 

SELECT *  

FROM # TEMP_EMPLOYEE2  

 

 

 

## STRING FUNCTIONS (TRIM, LTRIM,RTRIM,REPLACE, SUBSTRING,UPPER,LOWER) L = LEFT, R = RIGHT  

 

## USE TRIM , LTRIM, RTRIM 

 

SELECT EMPLOYEEID TRIM (EMPLOYEEID) AS IDTRIM 

FROM EMPLOYEEERRORS  

 

SELECT EMPLOYEEID RTRIM(EMPLOYEEID) AS IDTRIM 

FROM EMPLOYEEERRORS  

 

SELECT EMPLOYEEID LTRIM(EMPLOYEEID) AS IDTRIM 

FROM EMPLOYEEERRORS  

 

 

#using replace  

 

SELECT LASTNAME, REPLACE (LASTNAME, '-Fired', ' ' ) as Lastnamefixed 

 

FROM EMPLOYEEERRORS  

 

 

# using substring WHICH INCLUDES FUZZY MATCH  

 

select substring(FirstName, 1, 3) 

from EMPLOYEEERRORS 

 

-- FUZZY MATCH  

 

SELECT ERR.FIRSTNAME, SUBSTRING (ERR.FIRSTNAME,1,3), DEM.FIRSTNAME,SUBSTRING(DEM.FIRSTNAME,1,3) 

FROM EMPLOYEEERRORS ERR 

JOIN EMPLOYEEDEMOGRAPHICS DEM 

ON SUBSTRING(ERR.FIRSTNAME,1,3) = SUBSTRING(DEM.FIRSTNAME,1,3) 

 

---NORMALLY COMBINE GENDER,FIRSTNAME, LASTNAME, AGE DOB 

 

## UPPER OR LOWER  

 

 

SELECT FIRSTNAME, LOWER(FIRSTNAME) 

FROM EMPLOYEEERRORS  

 

SELECT FIRSTNAME, UPPER(FIRSTNAME) 

FROM EMPLOYEEERRORS  

 

 

## STORED PROCEDURES  

 

CREATE PROCEDURE TEST 

AS  

SELECT * 

FROM EmployeeDemographics 

 

EXEC TEST  

 

 

CREATE PROCEDURE TEMP_EMPLOYEE 

AS  

CREATE TABLE # TEMP_EMPLOYEE ( 

JOBTITLE VARCHAR (100), 

EMPLOYEESPERJOB INT,  

AVGAGE INT, 

AVGSALARY INT 

 

) 

 

INSERT INTO #TEMP_EMPLOYEE 

SELECT JOBTITLE, COUNT ( JOBTITLE), AVG(AGE), AVG (SALARY) 

FROM SQLTUTORIAL.. EMPLOYEEDEMOGRAPHICS EMP 

JOIN SQLTUTORIAL.. EMPLOYEESALARY SAL  

ON EMP.EMPLOYEEID = SAL.EMPLOYEEID  

GROUP BY JOBTITLE  

 

SELECT *  

FROM # TEMP_EMPLOYEE 

 

EXEC TEMP_EMPLOYEE  

 

 

 

## SUBQUARIES ( IN THE SELECT, FROM, AND WHERE STATEMENT )  

 

 

select *  

from employeesalary 

 

## subquery in select  

 

select employeeid, salary, (SELECT AVG(SALARY) FROM EMPLOYEESALARY) AS ALL AVGSALARY 

FROM EMPLOYEESALARY  

 

 

-- HOW TO DO WITH PARTITION BY  

 

SELECT EMPLOYEEID, SALARY, AVG(SALARY) OVER () AS ALLAVGSALARY  

FROM EMPLOYEESALARY  

 

-- WHY GROUP BY DOESNT WORK  

 

SELECT EMPLOYEEID, SALARY, AVG(SALARY) AS ALLAVGSALARY  

FROM EMPLOYEESALARY  

GROUP BY EMPLOYEEID, SALARY  

ORDER BY 1,2 

 

 

 

-- SUBQUERY IN FROM  

 

SELECT A.EMPLOYEEID, ALLAVGSALARY 

FROM (SELECT EMPLOYEEID,SALARY, AVG(SALARY) OVER () AS ALLAVGSALARY 

FROM EMPLOYEESALARY) A  

 

 

--SUBQUERY IN WHERE  

 

SELECT EMPLOYEEID, JOBTITLE, SALARY 

FROM EMPLOYEESALARY  

WHERE EMPLOYEEID IN ( 

SELECT * 

FROM EMPLOYEEDEMOGRAPHICS) 
